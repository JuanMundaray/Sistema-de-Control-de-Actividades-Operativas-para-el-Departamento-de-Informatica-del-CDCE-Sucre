CREATE SCHEMA IF NOT EXISTS actividades AUTHORIZATION postgres;CREATE TABLE IF NOT EXISTS actividades.departamentos(nombre_departamento character varying(100) NOT NULL,id_departamento serial NOT NULL,PRIMARY KEY (id_departamento), CONSTRAINT "nombre_UNI" UNIQUE (nombre_departamento));INSERT INTO actividades.departamentos(nombre_departamento)VALUES ('INFORMATICA');CREATE TABLE IF NOT EXISTS actividades.tipo_actividad(id_tipo serial NOT NULL,nombre_tipo character varying(100) NOT NULL,PRIMARY KEY (id_tipo));INSERT INTO actividades.tipo_actividad(nombre_tipo)VALUES ('PROGRAMACION');INSERT INTO actividades.tipo_actividad(nombre_tipo)VALUES ('MANTENIMIENTO CORRECTIVO');INSERT INTO actividades.tipo_actividad(nombre_tipo)VALUES ('MANTENIMIENTO PREVENTIVO');create table actividades.usuario(id_usuario serial, nombre_usuario varchar(100), nombre varchar(100), cedula varchar(15),contrasena varchar(100),tipo_usuario varchar(100),fecha_creacion date, id_departamento integer,primary key(id_usuario),constraint "nombreusuario_UNI" unique(nombre_usuario),constraint "cedula_UNI" unique(cedula),FOREIGN KEY(id_departamento) REFERENCES actividades.departamentos(id_departamento));INSERT INTO actividades.usuario(nombre_usuario, nombre, cedula, contrasena,tipo_usuario, fecha_creacion,id_departamento)VALUES('demo','ADMIN','000000000','1234','administrador','2024-01-01', 1);CREATE TABLE IF NOT EXISTS actividades.actividad(id serial NOT NULL,codigo character varying(100) NOT NULL,nombre character varying(100) NOT NULL,fecha date NOT NULL,dep_emisor character varying(100) NOT NULL,dep_receptor character varying(100) NOT NULL,nom_atendido character varying(100) NOT NULL,ape_atendido  character varying(100) NOT NULL,ced_atendido character varying(15) NOT NULL,observacion character varying(512) NOT NULL,nom_responsable character varying(100) NOT NULL,ape_responsable character varying(100) NOT NULL,estado character varying(100) NOT NULL,id_tipo integer NOT NULL,ced_responsable character varying(15) NOT NULL, informe character varying(512) NOT NULL, evidencia character varying(512) NOT NULL,id_usuario INTEGER,PRIMARY KEY (id),constraint "codigo_UNI" unique(codigo),FOREIGN KEY(id_usuario) REFERENCES actividades.usuario(id_usuario) ON DELETE SET NULL,FOREIGN KEY(id_tipo) REFERENCES actividades.tipo_actividad(id_tipo));CREATE TABLE IF NOT EXISTS actividades.peticiones(id_peticion serial NOT NULL,nombre_peticion character varying(100),departamento_peticion integer,detalles_peticion character varying(512),fecha_peticion date,id_usuario integer,PRIMARY KEY (id_peticion), FOREIGN KEY(id_usuario) REFERENCES actividades.usuario(id_usuario) ON DELETE CASCADE, FOREIGN KEY(departamento_peticion) REFERENCES actividades.departamentos(id_departamento));CREATE OR REPLACE FUNCTION actividades."guardar_actividad_historial"() RETURNS trigger LANGUAGE 'plpgsql' COST 100 VOLATILE NOT LEAKPROOF AS $BODY$ begin insert into actividades.historial_actividades values( new.id,new.codigo, new.nombre,new.fecha, new.dep_emisor, new.nom_atendido, new.ape_atendido, new.ced_atendido,new.observacion, new.nom_responsable, new.ape_responsable, new.estado, new.id_tipo,new.ced_responsable, new.dep_receptor,new.id_usuario); return new; End $BODY$;CREATE FUNCTION actividades.guardar_peticion_historial() RETURNS trigger LANGUAGE 'plpgsql' COST 100 VOLATILE NOT LEAKPROOF AS $BODY$ begin insert into actividades.historial_peticiones values(new.id_peticion,new.nombre_peticion, new.departamento_peticion, new.detalles_peticion, new.fecha_peticion);return new;END $BODY$;CREATE OR REPLACE FUNCTION actividades.guardar_usuario_historial() RETURNS trigger LANGUAGE 'plpgsql' COST 100 VOLATILE NOT LEAKPROOF AS $BODY$ begin insert into actividades.historial_usuario values( new.id_usuario,new.nombre_usuario, new.nombre,new.cedula, new.contrasena, new.tipo_usuario, new.fecha_creacion, new.id_departamento); return new; End $BODY$;CREATE OR REPLACE TRIGGER guardar_peticion_historial BEFORE INSERT ON actividades.peticiones FOR EACH ROW EXECUTE FUNCTION actividades.guardar_peticion_historial();CREATE OR REPLACE TRIGGER guardar_actividad_historial BEFORE INSERT ON actividades.actividad FOR EACH ROW EXECUTE FUNCTION actividades."guardar_actividad_historial"();CREATE OR REPLACE TRIGGER guardar_usuario_historial BEFORE INSERT ON actividades.usuario FOR EACH ROW EXECUTE FUNCTION actividades."guardar_usuario_historial"();create table actividades.historial_usuario(id_usuario integer,nombre_usuario varchar(100), nombre varchar(100), cedula varchar(15),contrasena varchar(100),tipo_usuario varchar(100),fecha_creacion date, id_departamento integer,primary key(id_usuario),FOREIGN KEY(id_usuario) REFERENCES actividades.historial_usuario(id_usuario));CREATE TABLE IF NOT EXISTS actividades.historial_actividades(id integer NOT NULL,codigo character varying(100) COLLATE pg_catalog."default" NOT NULL,nombre character varying(100) COLLATE pg_catalog."default" NOT NULL,fecha date NOT NULL,dep_emisor character varying(100) COLLATE pg_catalog."default" NOT NULL,nom_atendido character varying(100) COLLATE pg_catalog."default" NOT NULL,ape_atendido character varying(100) COLLATE pg_catalog."default" NOT NULL,ced_atendido character varying(15) COLLATE pg_catalog."default" NOT NULL,nom_responsable character varying(100) COLLATE pg_catalog."default" NOT NULL,ape_responsable character varying(100) COLLATE pg_catalog."default" NOT NULL,estado character varying(100) COLLATE pg_catalog."default" NOT NULL,id_tipo integer NOT NULL,ced_responsable character varying(15) NOT NULL,dep_receptor character varying(100) COLLATE pg_catalog."default" NOT NULL,id_usuario integer,PRIMARY KEY (id),CONSTRAINT "codigo_historial_UNI" UNIQUE (codigo),FOREIGN KEY (id_tipo) REFERENCES actividades.tipo_actividad(id_tipo),FOREIGN KEY (id_usuario) REFERENCES actividades.historial_usuario(id_usuario));CREATE TABLE IF NOT EXISTS actividades.historial_peticiones(id_peticion integer NOT NULL,nombre_peticion character varying(100),departamento_peticion integer,detalles_peticion character varying(512),fecha_peticion date,id_usuario integer,PRIMARY KEY (id_peticion), FOREIGN KEY(id_usuario) REFERENCES actividades.historial_usuario(id_usuario),FOREIGN KEY(departamento_peticion) REFERENCES actividades.departamentos(id_departamento));